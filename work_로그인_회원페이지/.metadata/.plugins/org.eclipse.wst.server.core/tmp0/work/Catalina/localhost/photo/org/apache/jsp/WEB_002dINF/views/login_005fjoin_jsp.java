/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.74
 * Generated at: 2023-06-04 18:01:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class login_005fjoin_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1683543939137L));
    _jspx_dependants.put("jar:file:/C:/Users/Hyo/Desktop/Data/Web&App/Project/Spring_Project/work/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/Spring_project_2/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("	<head>\r\n");
      out.write("		<meta charset=\"UTF-8\">\r\n");
      out.write("		<title>sign</title>\r\n");
      out.write("		<link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/css/login_join.css\">\r\n");
      out.write("		<script src=\"resources/js/httpRequest.js\"></script>\r\n");
      out.write("		<script src=\"resources/js/phone.js\"></script> <!-- 핸드폰 정규식 적용(000-000-0000 or 000-0000-0000)-->\r\n");
      out.write("		<script src=\"//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\"></script> <!-- 카카오 주소 api -->\r\n");
      out.write("		<script type=\"text/javascript\">\r\n");
      out.write("			\r\n");
      out.write("			/* sign in */\r\n");
      out.write("			function login() {\r\n");
      out.write("				\r\n");
      out.write("				var l = document.l;\r\n");
      out.write("				var email = l.email.value.trim();\r\n");
      out.write("				var pw = l.pw.value.trim();\r\n");
      out.write("				\r\n");
      out.write("				// 유효성 체크\r\n");
      out.write("				if (email == \"\") {\r\n");
      out.write("					alert(\"이메일을 입력해주세요\");\r\n");
      out.write("					return;\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				if (pw == \"\") {\r\n");
      out.write("					alert(\"비밀번호를 입력해주세요\");\r\n");
      out.write("					return;\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				var url = \"login.do\";\r\n");
      out.write("				var param = \"email=\"+email+\"&pw=\"+pw;\r\n");
      out.write("				\r\n");
      out.write("				sendRequest(url, param, myCheck, \"POST\");\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			function myCheck() {\r\n");
      out.write("				\r\n");
      out.write("				if(xhr.readyState == 4 && xhr.status == 200) {\r\n");
      out.write("					\r\n");
      out.write("					var data = xhr.responseText;\r\n");
      out.write("					var json = (new Function('return'+data))();\r\n");
      out.write("					\r\n");
      out.write("					// 로그인 하기 전에 복수의 로그인 페이지가 열려 있을 때(두 개 이상의 페이지가 있을 때)\r\n");
      out.write("					// 한 개의 로그인페이지에서 로그인이 된 상태가 되면 다른 한쪽에 로그인 시도 시\r\n");
      out.write("					// 로그인 하지 못하도록 처리\r\n");
      out.write("					if(json[0].result == 'session_conn') {\r\n");
      out.write("						\r\n");
      out.write("						alert(\"로그아웃 하시고 다시 시도해 주세요\");\r\n");
      out.write("						// 기존페이지를 새로운 페이지로 변경\r\n");
      out.write("						location.replace(\"login_join\");\r\n");
      out.write("						\r\n");
      out.write("					} else if(json[0].result == 'no_email') {\r\n");
      out.write("						\r\n");
      out.write("						alert(\"이메일이 존재하지 않습니다\");\r\n");
      out.write("						\r\n");
      out.write("					} else if(json[0].result == 'no_pw') {\r\n");
      out.write("						\r\n");
      out.write("						alert(\"비밀번호가 일치하지 않습니다\");\r\n");
      out.write("						\r\n");
      out.write("					} else {\r\n");
      out.write("						\r\n");
      out.write("						alert(\"로그인 성공\");\r\n");
      out.write("						location.replace(\"main\");						\r\n");
      out.write("					}\r\n");
      out.write("				}\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			/* sign up */\r\n");
      out.write("			\r\n");
      out.write("			// 이메일 중복체크\r\n");
      out.write("			function check_email() {\r\n");
      out.write("				\r\n");
      out.write("				var email = document.getElementById(\"email\").value.trim();\r\n");
      out.write("				var email_f = document.getElementById(\"email_f\");\r\n");
      out.write("				\r\n");
      out.write("				/* 이메일 정규식 */\r\n");
      out.write("				// ex) abc123@defgh456.ijk\r\n");
      out.write("				// \" -\" ,\" _\",\" .\" 세개의 문자 입력을 허용하며 \r\n");
      out.write("				// 도메인 주소 \" .\"  이전에 \"@\" 가 나와야 하고\r\n");
      out.write("				// 도메인 주소 \".\"   이후에 2-3 문자는 와야된다\r\n");
      out.write("				var pattern = /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i;\r\n");
      out.write("				\r\n");
      out.write("				// 유효성 체크\r\n");
      out.write("				if (email == \"\") {\r\n");
      out.write("					\r\n");
      out.write("					email_f.innerHTML=\"이메일을 입력해주세요\";\r\n");
      out.write("					email_f.style.color = '#DF0000';\r\n");
      out.write("					return;\r\n");
      out.write("					\r\n");
      out.write("				} else if (!pattern.test(email)) {\r\n");
      out.write("					\r\n");
      out.write("					email_f.innerHTML=\"이메일 형식으로 입력해주세요\";\r\n");
      out.write("					email_f.style.color = '#DF0000';\r\n");
      out.write("					m.email.focus();\r\n");
      out.write("					return;\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				var url = \"check_email\";\r\n");
      out.write("				var param = \"email=\"+encodeURIComponent(email);\r\n");
      out.write("				\r\n");
      out.write("				sendRequest(url, param, resultFn, \"POST\");	\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			function resultFn() {\r\n");
      out.write("				\r\n");
      out.write("				if(xhr.readyState == 4 && xhr.status == 200) {\r\n");
      out.write("					\r\n");
      out.write("					var data = xhr.responseText;\r\n");
      out.write("					var json = (new Function('return'+data))();\r\n");
      out.write("										\r\n");
      out.write("					if(json[0].result == \"no\") {\r\n");
      out.write("						\r\n");
      out.write("						email_f.innerHTML=\"이미 사용중인 이메일 입니다\";\r\n");
      out.write("						email_f.style.color = '#DF0000';\r\n");
      out.write("						\r\n");
      out.write("					} else {\r\n");
      out.write("						\r\n");
      out.write("						email_f.innerHTML=\"사용가능한 이메일 입니다\";\r\n");
      out.write("						email_f.style.color = 'green';\r\n");
      out.write("					}										\r\n");
      out.write("				}				\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			// 별명 중복체크\r\n");
      out.write("			function check_nick() {\r\n");
      out.write("				\r\n");
      out.write("				var nickname = document.getElementById(\"nickname\").value.trim();\r\n");
      out.write("				var nick_f = document.getElementById(\"nick_f\");\r\n");
      out.write("				\r\n");
      out.write("				// 유효성 체크\r\n");
      out.write("				if (nickname == \"\") {\r\n");
      out.write("					\r\n");
      out.write("					nick_f.innerHTML=\"별명을 입력해주세요\";\r\n");
      out.write("					nick_f.style.color = '#DF0000';\r\n");
      out.write("					return;\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				var url = \"check_nickname\";\r\n");
      out.write("				var param = \"nickname=\"+encodeURIComponent(nickname);\r\n");
      out.write("				\r\n");
      out.write("				sendRequest(url, param, resultFnn, \"POST\");	\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			function resultFnn() {\r\n");
      out.write("				\r\n");
      out.write("				if(xhr.readyState == 4 && xhr.status == 200) {\r\n");
      out.write("					\r\n");
      out.write("					var data = xhr.responseText;\r\n");
      out.write("					var json = (new Function('return'+data))();\r\n");
      out.write("										\r\n");
      out.write("					if(json[0].result == \"no\") {\r\n");
      out.write("						\r\n");
      out.write("						nick_f.innerHTML=\"이미 사용중인 별명 입니다\";\r\n");
      out.write("						nick_f.style.color = '#DF0000';\r\n");
      out.write("						\r\n");
      out.write("					} else {\r\n");
      out.write("						\r\n");
      out.write("						nick_f.innerHTML=\"사용가능한 별명 입니다\";\r\n");
      out.write("						nick_f.style.color = 'green';\r\n");
      out.write("					}										\r\n");
      out.write("				}				\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			// 주소 api\r\n");
      out.write("		    function findAddr() {\r\n");
      out.write("		        new daum.Postcode({\r\n");
      out.write("		            oncomplete: function(data) {\r\n");
      out.write("		            	// 팝업에서 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분.\r\n");
      out.write("\r\n");
      out.write("		                // 각 주소의 노출 규칙에 따라 주소를 조합한다.\r\n");
      out.write("		                // 내려오는 변수가 값이 없는 경우엔 공백('')값을 가지므로, 이를 참고하여 분기 한다.\r\n");
      out.write("\r\n");
      out.write("		                var addr = ''; // 주소 변수\r\n");
      out.write("		                		                \r\n");
      out.write("		              	//사용자가 선택한 주소 타입(도로명, 지번)에 따라 해당 주소 값을 가져온다.\r\n");
      out.write("		                if (data.userSelectedType === 'R') { // 사용자가 도로명 주소를 선택했을 경우\r\n");
      out.write("		                    addr = data.roadAddress;\r\n");
      out.write("		                } else { // 사용자가 지번 주소를 선택했을 경우(J)\r\n");
      out.write("		                    addr = data.jibunAddress;\r\n");
      out.write("		                }\r\n");
      out.write("		                \r\n");
      out.write("		                // 우편번호와 주소 정보를 해당 필드에 넣는다.\r\n");
      out.write("		                document.getElementById(\"postcode\").value = data.zonecode;		                \r\n");
      out.write("		                document.getElementById(\"address\").value = addr;\r\n");
      out.write("		                \r\n");
      out.write("		             	// 커서를 상세주소 필드로 이동한다.\r\n");
      out.write("		                document.getElementById(\"detailAddress\").focus();\r\n");
      out.write("						\r\n");
      out.write("		            }\r\n");
      out.write("		        }).open();\r\n");
      out.write("			}\r\n");
      out.write("		    \r\n");
      out.write("			\r\n");
      out.write("			function send() {\r\n");
      out.write("				\r\n");
      out.write("				var m = document.m;\r\n");
      out.write("				var email = m.email.value.trim();\r\n");
      out.write("				var pw = m.pw.value.trim();\r\n");
      out.write("				var name = m.name.value.trim();\r\n");
      out.write("				var nickname = m.nickname.value.trim();\r\n");
      out.write("				\r\n");
      out.write("							\r\n");
      out.write("				if (email == \"\") {\r\n");
      out.write("					\r\n");
      out.write("					email_f.innerHTML=\"이메일을 입력해주세요\";\r\n");
      out.write("					email_f.style.color = '#DF0000';\r\n");
      out.write("					return;\r\n");
      out.write("				}\r\n");
      out.write("								\r\n");
      out.write("				if (pw == \"\") {\r\n");
      out.write("					\r\n");
      out.write("					document.getElementById(\"pw_f\").innerHTML=\"비밀번호를 입력해주세요\";\r\n");
      out.write("					document.getElementById(\"pw_f\").style.color = '#DF0000';				\r\n");
      out.write("					return;\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				if (name == \"\") {\r\n");
      out.write("					\r\n");
      out.write("					document.getElementById(\"name_f\").innerHTML=\"이름을 입력해주세요\";\r\n");
      out.write("					document.getElementById(\"name_f\").style.color = '#DF0000';\r\n");
      out.write("					return;\r\n");
      out.write("					\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				if (nickname == \"\") {\r\n");
      out.write("					\r\n");
      out.write("					document.getElementById(\"nick_f\").innerHTML=\"별명을 입력해주세요\";\r\n");
      out.write("					document.getElementById(\"nick_f\").style.color = '#DF0000';\r\n");
      out.write("					return;\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				\r\n");
      out.write("				m.action = \"member_insert\";\r\n");
      out.write("				m.method = \"POST\";\r\n");
      out.write("				m.submit();\r\n");
      out.write("			}\r\n");
      out.write("		</script>\r\n");
      out.write("	</head>\r\n");
      out.write("	<body>\r\n");
      out.write("		<header>\r\n");
      out.write("			<div class=\"logo\" >\r\n");
      out.write("			<img src=\"resources/img/logo.png\" onclick=\"location.href='main'\">\r\n");
      out.write("			</div>\r\n");
      out.write("		</header>		\r\n");
      out.write("		<div class=\"login-wrap\">\r\n");
      out.write("		  <div class=\"login-html\">\r\n");
      out.write("		    <input id=\"tab-1\" type=\"radio\" name=\"tab\" class=\"sign-in\" checked><label for=\"tab-1\" class=\"tab\">로그인</label>\r\n");
      out.write("		    <input id=\"tab-2\" type=\"radio\" name=\"tab\" class=\"sign-up\"><label for=\"tab-2\" class=\"tab\">회원가입</label>\r\n");
      out.write("		    <div class=\"login-form\">\r\n");
      out.write("		    <form name=\"l\">\r\n");
      out.write("		      <div class=\"sign-in-htm\">\r\n");
      out.write("		        <div class=\"group\">\r\n");
      out.write("		          <label for=\"user\" class=\"label\">이메일</label>\r\n");
      out.write("		          <input type=\"text\" class=\"input\" name=\"email\" maxlength=\"35\">\r\n");
      out.write("		        </div>\r\n");
      out.write("		        <div class=\"group\">\r\n");
      out.write("		          <label for=\"pass\" class=\"label\">비밀번호</label>\r\n");
      out.write("		          <input type=\"password\" class=\"input\" data-type=\"password\" name=\"pw\" maxlength=\"30\">\r\n");
      out.write("		        </div>\r\n");
      out.write("		        <div class=\"hr\"></div>\r\n");
      out.write("		        <div class=\"group\">\r\n");
      out.write("		          <input class=\"button\" id=\"signin\" value=\"로그인\" onclick=\"login()\">\r\n");
      out.write("		        </div>		        \r\n");
      out.write("		        <!-- <div class=\"foot-lnk\">\r\n");
      out.write("		          <label>Forgot Password?</label>\r\n");
      out.write("		        </div> -->\r\n");
      out.write("		      </div>\r\n");
      out.write("		     </form>\r\n");
      out.write("		     <form name=\"m\">\r\n");
      out.write("		      <div class=\"sign-up-htm\">\r\n");
      out.write("		        <div class=\"group\">\r\n");
      out.write("		          <label for=\"user\" class=\"label\">이메일 &#42;</label>\r\n");
      out.write("		          <input id=\"email\" type=\"text\" class=\"input\" name=\"email\" maxlength=\"35\" oninput=\"check_email()\" placeholder=\"이메일을 입력하세요\">\r\n");
      out.write("		          <div class=\"check_form\" id=\"email_f\"></div>	\r\n");
      out.write("		        </div>\r\n");
      out.write("		        <div class=\"group\" id=\"pass\">\r\n");
      out.write("		          <label for=\"pass\" class=\"label\">비밀번호 &#42;</label>\r\n");
      out.write("		          <input type=\"password\" class=\"input\" data-type=\"password\" name=\"pw\" maxlength=\"30\" placeholder=\"비밀번호를 입력하세요\">\r\n");
      out.write("		          <div class=\"check_form\" id=\"pw_f\"></div>	\r\n");
      out.write("		        </div>\r\n");
      out.write("		        <div class=\"group\">\r\n");
      out.write("		          <label for=\"pass\" class=\"label\">이름 &#42;</label>\r\n");
      out.write("		          <input type=\"text\" class=\"input\" name=\"name\" maxlength=\"20\" placeholder=\"이름을 입력하세요\">\r\n");
      out.write("		          <div class=\"check_form\" id=\"name_f\"></div>	\r\n");
      out.write("		        </div>\r\n");
      out.write("		        <div class=\"group\">\r\n");
      out.write("		          <label for=\"pass\" class=\"label\">별명 &#42;</label>\r\n");
      out.write("		          <input id=\"nickname\" type=\"text\" class=\"input\" name=\"nickname\" maxlength=\"20\" oninput=\"check_nick()\" placeholder=\"별명을 입력하세요\">\r\n");
      out.write("		          <div class=\"check_form\" id=\"nick_f\"></div>				<!-- oninput: input에 값이 변경될 때마다 oninput 이벤트가 발생 -->\r\n");
      out.write("		        </div>\r\n");
      out.write("		        <div class=\"group\">\r\n");
      out.write("		          <label for=\"pass\" class=\"label\">주소</label>\r\n");
      out.write("		          <input type=\"text\" class=\"input\" id=\"postcode\" name=\"address_postcode\" placeholder=\"우편번호\" readonly onclick=\"findAddr()\">		          		          \r\n");
      out.write("		        </div>\r\n");
      out.write("		        <div class=\"group\">\r\n");
      out.write("		        	<input type=\"text\" class=\"input\" id=\"address\" class=\"input\" name=\"address\" placeholder=\"주소\" readonly onclick=\"findAddr()\">\r\n");
      out.write("		        </div>\r\n");
      out.write("		        <div class=\"group\">\r\n");
      out.write("		        	<input type=\"text\" class=\"input\" id=\"detailAddress\" name=\"address_detail\" placeholder=\"상세주소\">\r\n");
      out.write("		        </div>\r\n");
      out.write("		        <div class=\"group\">\r\n");
      out.write("		          <label for=\"pass\" class=\"label\">핸드폰</label>\r\n");
      out.write("		          <input type=\"text\" class=\"input\" name=\"phone\" maxlength=\"13\" oninput=\"autoHyphen(this)\" placeholder=\"핸드폰번호\" autofocus>\r\n");
      out.write("		        </div>\r\n");
      out.write("		        <div class=\"hr\"></div>\r\n");
      out.write("		        <div class=\"group\">\r\n");
      out.write("		          <input class=\"button\" id=\"signup\" value=\"회원가입\" onclick=\"send()\">\r\n");
      out.write("		        </div>\r\n");
      out.write("		      </div>\r\n");
      out.write("		      </form>\r\n");
      out.write("		    </div>\r\n");
      out.write("		  </div>\r\n");
      out.write("		</div>\r\n");
      out.write("	</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}

/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.74
 * Generated at: 2023-06-03 13:25:24 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class test_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1683543939137L));
    _jspx_dependants.put("jar:file:/C:/Users/Hyo/Desktop/Data/Web&App/Project/Spring_Project/work/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/Spring_project_2/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fchoose;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fchoose = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fchoose.release();
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("	<head>\r\n");
      out.write("		<meta charset=\"UTF-8\">\r\n");
      out.write("		<title>sign</title>\r\n");
      out.write("		<link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/css/login.css\">\r\n");
      out.write("		<script src=\"resources/js/httpRequest.js\"></script>\r\n");
      out.write("		<script src=\"\"></script>\r\n");
      out.write("		<script type=\"text/javascript\">\r\n");
      out.write("			\r\n");
      out.write("			/* sign in */\r\n");
      out.write("			function login() {\r\n");
      out.write("				\r\n");
      out.write("				var l = document.l;\r\n");
      out.write("				var email = l.email.value.trim();\r\n");
      out.write("				var pw = l.pw.value.trim();\r\n");
      out.write("				\r\n");
      out.write("				// 유효성 체크\r\n");
      out.write("				if (email == \"\") {\r\n");
      out.write("					alert(\"이메일을 입력해주세요\");\r\n");
      out.write("					return;\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				if (pw == \"\") {\r\n");
      out.write("					alert(\"비밀번호를 입력해주세요\");\r\n");
      out.write("					return;\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				var url = \"login.do\";\r\n");
      out.write("				var param = \"email=\"+email+\"&pw=\"+pw;\r\n");
      out.write("				\r\n");
      out.write("				sendRequest(url, param, myCheck, \"POST\");\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			function myCheck() {\r\n");
      out.write("				\r\n");
      out.write("				if(xhr.readyState == 4 && xhr.status == 200) {\r\n");
      out.write("					\r\n");
      out.write("					var data = xhr.responseText;\r\n");
      out.write("					var json = (new Function('return'+data))();\r\n");
      out.write("					\r\n");
      out.write("					if(json[0].result == 'no_email') {\r\n");
      out.write("						\r\n");
      out.write("						alert(\"이메일이 존재하지 않습니다\");\r\n");
      out.write("						\r\n");
      out.write("					} else if(json[0].result == 'no_pw') {\r\n");
      out.write("						\r\n");
      out.write("						alert(\"비밀번호가 일치하지 않습니다\");\r\n");
      out.write("						\r\n");
      out.write("					} else {\r\n");
      out.write("						\r\n");
      out.write("						alert(\"로그인 성공\");\r\n");
      out.write("						location.href=\"main\";\r\n");
      out.write("					}\r\n");
      out.write("				}\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			/* sign up */\r\n");
      out.write("			\r\n");
      out.write("			// 별명 중복체크\r\n");
      out.write("			var b_nickCheck = false;\r\n");
      out.write("						\r\n");
      out.write("			// 별명 중복체크를 하기 위한 메서드\r\n");
      out.write("			function check_nick() {\r\n");
      out.write("				\r\n");
      out.write("				var nickname = document.getElementById(\"nickname\").value.trim();\r\n");
      out.write("				\r\n");
      out.write("				// 유효성 체크\r\n");
      out.write("				if (nickname == \"\") {\r\n");
      out.write("					\r\n");
      out.write("					alert(\"별명을 입력하세요\");\r\n");
      out.write("					return;\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				var url = \"check_nickname\";\r\n");
      out.write("				var param = \"nickname=\"+encodeURIComponent(nickname);\r\n");
      out.write("				\r\n");
      out.write("				sendRequest(url, param, resultFn, \"POST\");\r\n");
      out.write("	\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			function resultFn() {\r\n");
      out.write("				\r\n");
      out.write("				if(xhr.readyState == 4 && xhr.status == 200) {\r\n");
      out.write("					\r\n");
      out.write("					var data = xhr.responseText;\r\n");
      out.write("					var json = (new Function('return'+data))();\r\n");
      out.write("					\r\n");
      out.write("					var nnn = json[0].result;\r\n");
      out.write("					\r\n");
      out.write("					if(json[0].result == \"no\") {\r\n");
      out.write("						\r\n");
      out.write("						alert(\"이미 사용중인 별명 입니다\");\r\n");
      out.write("						return;\r\n");
      out.write("						\r\n");
      out.write("					} else {\r\n");
      out.write("						\r\n");
      out.write("						alert(\"사용가능한 별명 입니다\");\r\n");
      out.write("						b_nickCheck = true;\r\n");
      out.write("					}\r\n");
      out.write("					\r\n");
      out.write("					\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("			}\r\n");
      out.write("				\r\n");
      out.write("			// input 태그에 글자가 한 글자라도 바뀔 때 호출\r\n");
      out.write("			function nick() {\r\n");
      out.write("				\r\n");
      out.write("				b_nickCheck = false;\r\n");
      out.write("				return check_nick();\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("		\r\n");
      out.write("			function send() {\r\n");
      out.write("				\r\n");
      out.write("				var m = document.m;\r\n");
      out.write("				var email = m.email.value.trim();\r\n");
      out.write("				var pw = m.pw.value.trim();\r\n");
      out.write("				var nickname = m.nickname.value.trim();\r\n");
      out.write("				var name = m.name.value.trim();\r\n");
      out.write("				var address = m.address.value;\r\n");
      out.write("				var phone = m.phone.value;\r\n");
      out.write("							\r\n");
      out.write("				if (email == \"\") {\r\n");
      out.write("					\r\n");
      out.write("					alert(\"이메일을 입력해주세요\");\r\n");
      out.write("					return;\r\n");
      out.write("				}\r\n");
      out.write("								\r\n");
      out.write("				if (pw == \"\") {\r\n");
      out.write("					\r\n");
      out.write("					alert(\"비밀번호를 입력해주세요\");\r\n");
      out.write("					return;\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				if (name == \"\") {\r\n");
      out.write("					\r\n");
      out.write("					alert(\"이름을 입력해주세요\");\r\n");
      out.write("					return;\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				if (nickname == \"\") {\r\n");
      out.write("					\r\n");
      out.write("					alert(\"별명을 입력해주세요\");\r\n");
      out.write("					return;\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				if(!b_nickCheck) {\r\n");
      out.write("					\r\n");
      out.write("					alert(\"별명 중복체크를 하세요\");\r\n");
      out.write("					return;\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				m.action = \"member_insert\";\r\n");
      out.write("				m.method = \"POST\";\r\n");
      out.write("				m.submit();\r\n");
      out.write("			}\r\n");
      out.write("		</script>\r\n");
      out.write("	</head>\r\n");
      out.write("	<body>\r\n");
      out.write("		<header>\r\n");
      out.write("			<div class=\"logo\" >\r\n");
      out.write("			<img src=\"resources/img/logo.png\" onclick=\"location.href='main'\">\r\n");
      out.write("			</div>\r\n");
      out.write("		</header>		\r\n");
      out.write("		<div class=\"login-wrap\">\r\n");
      out.write("		  <div class=\"login-html\">\r\n");
      out.write("		    <input id=\"tab-1\" type=\"radio\" name=\"tab\" class=\"sign-in\" checked><label for=\"tab-1\" class=\"tab\">로그인</label>\r\n");
      out.write("		    <input id=\"tab-2\" type=\"radio\" name=\"tab\" class=\"sign-up\"><label for=\"tab-2\" class=\"tab\">회원가입</label>\r\n");
      out.write("		    <div class=\"login-form\">\r\n");
      out.write("		    <form name=\"l\">\r\n");
      out.write("		      <div class=\"sign-in-htm\">\r\n");
      out.write("		        <div class=\"group\">\r\n");
      out.write("		          <label for=\"user\" class=\"label\">이메일</label>\r\n");
      out.write("		          <input type=\"text\" class=\"input\" name=\"email\">\r\n");
      out.write("		        </div>\r\n");
      out.write("		        <div class=\"group\">\r\n");
      out.write("		          <label for=\"pass\" class=\"label\">비밀번호</label>\r\n");
      out.write("		          <input type=\"password\" class=\"input\" data-type=\"password\" name=\"pw\">\r\n");
      out.write("		        </div>\r\n");
      out.write("		        <!-- <div class=\"group\">\r\n");
      out.write("		          <input id=\"check\" type=\"checkbox\" class=\"check\" checked>\r\n");
      out.write("		          <label for=\"check\"><span class=\"icon\"></span> Keep me Signed in</label>\r\n");
      out.write("		        </div> -->\r\n");
      out.write("		        <div class=\"group\">\r\n");
      out.write("		          <input class=\"button\" id=\"signin\" value=\"로그인\" onclick=\"login()\">\r\n");
      out.write("		        </div>\r\n");
      out.write("		        <div class=\"hr\"></div>\r\n");
      out.write("		        <div class=\"foot-lnk\">\r\n");
      out.write("		          <label>Forgot Password?</label>\r\n");
      out.write("		        </div>\r\n");
      out.write("		      </div>\r\n");
      out.write("		     </form>\r\n");
      out.write("		     <form name=\"m\">\r\n");
      out.write("		      <div class=\"sign-up-htm\">\r\n");
      out.write("		        <div class=\"group\">\r\n");
      out.write("		          <label for=\"user\" class=\"label\">이메일 &#42;</label>\r\n");
      out.write("		          <input type=\"text\" class=\"input\" name=\"email\">\r\n");
      out.write("		          <div>\r\n");
      out.write("		          ");
      if (_jspx_meth_c_005fchoose_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("				  </div>\r\n");
      out.write("		        </div>\r\n");
      out.write("		        <div class=\"group\">\r\n");
      out.write("		          <label for=\"pass\" class=\"label\">비밀번호 &#42;</label>\r\n");
      out.write("		          <input type=\"password\" class=\"input\" data-type=\"password\" name=\"pw\">\r\n");
      out.write("		        </div>\r\n");
      out.write("		        <div class=\"group\">\r\n");
      out.write("		          <label for=\"pass\" class=\"label\">이름 &#42;</label>\r\n");
      out.write("		          <input type=\"text\" class=\"input\" name=\"name\">\r\n");
      out.write("		        </div>\r\n");
      out.write("		        <div class=\"group\">\r\n");
      out.write("		          <label for=\"pass\" class=\"label\">별명 &#42;</label>\r\n");
      out.write("		          <input id=\"nickname\" type=\"text\" class=\"input\" name=\"nickname\" onchange=\"nick()\">\r\n");
      out.write("		          <input type=\"button\" value=\"중복체크\" onclick=\"check_nick()\" style=\"cursor:pointer;\">\r\n");
      out.write("		        </div>\r\n");
      out.write("		        <div class=\"group\">\r\n");
      out.write("		          <label for=\"pass\" class=\"label\">주소</label>\r\n");
      out.write("		          <input type=\"text\" class=\"input\" name=\"address\">\r\n");
      out.write("		        </div>\r\n");
      out.write("		        <div class=\"group\">\r\n");
      out.write("		          <label for=\"pass\" class=\"label\">핸드폰</label>\r\n");
      out.write("		          <input type=\"text\" class=\"input\" name=\"phone\">\r\n");
      out.write("		        </div>\r\n");
      out.write("		        <div class=\"group\">\r\n");
      out.write("		          <input class=\"button\" id=\"signup\" value=\"회원가입\" onclick=\"send()\">\r\n");
      out.write("		        </div>		        \r\n");
      out.write("		        <div class=\"hr\"></div>\r\n");
      out.write("		        <div class=\"foot-lnk\">\r\n");
      out.write("		          <label for=\"tab-1\">Already Member?</label>\r\n");
      out.write("		        </div>\r\n");
      out.write("		      </div>\r\n");
      out.write("		      </form>\r\n");
      out.write("		    </div>\r\n");
      out.write("		  </div>\r\n");
      out.write("		</div>\r\n");
      out.write("	</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fchoose_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:choose
    org.apache.taglibs.standard.tag.common.core.ChooseTag _jspx_th_c_005fchoose_005f0 = (org.apache.taglibs.standard.tag.common.core.ChooseTag) _005fjspx_005ftagPool_005fc_005fchoose.get(org.apache.taglibs.standard.tag.common.core.ChooseTag.class);
    boolean _jspx_th_c_005fchoose_005f0_reused = false;
    try {
      _jspx_th_c_005fchoose_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fchoose_005f0.setParent(null);
      int _jspx_eval_c_005fchoose_005f0 = _jspx_th_c_005fchoose_005f0.doStartTag();
      if (_jspx_eval_c_005fchoose_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("					");
          if (_jspx_meth_c_005fwhen_005f0(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
            return true;
          out.write("\r\n");
          out.write("					");
          if (_jspx_meth_c_005fwhen_005f1(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
            return true;
          out.write("\r\n");
          out.write("				  ");
          int evalDoAfterBody = _jspx_th_c_005fchoose_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fchoose_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fchoose.reuse(_jspx_th_c_005fchoose_005f0);
      _jspx_th_c_005fchoose_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fchoose_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fchoose_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f0 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    boolean _jspx_th_c_005fwhen_005f0_reused = false;
    try {
      _jspx_th_c_005fwhen_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fwhen_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
      // /WEB-INF/views/test.jsp(205,5) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fwhen_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${nnn eq no}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fwhen_005f0 = _jspx_th_c_005fwhen_005f0.doStartTag();
      if (_jspx_eval_c_005fwhen_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("		           		<div class=\"email\">사용중인 이메일 입니다 다른 이메일을 입력해주세요</div>\r\n");
          out.write("		    		");
          int evalDoAfterBody = _jspx_th_c_005fwhen_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fwhen_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f0);
      _jspx_th_c_005fwhen_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fwhen_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fwhen_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f1(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f1 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    boolean _jspx_th_c_005fwhen_005f1_reused = false;
    try {
      _jspx_th_c_005fwhen_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fwhen_005f1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
      // /WEB-INF/views/test.jsp(208,5) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fwhen_005f1.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${nnn eq yes}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fwhen_005f1 = _jspx_th_c_005fwhen_005f1.doStartTag();
      if (_jspx_eval_c_005fwhen_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("						<div class=\"nemail\">사용가능한 이메일 입니다</div>\r\n");
          out.write("					");
          int evalDoAfterBody = _jspx_th_c_005fwhen_005f1.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fwhen_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f1);
      _jspx_th_c_005fwhen_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fwhen_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fwhen_005f1_reused);
    }
    return false;
  }
}
